#!/bin/bash

#
# A hook script to verify what is about to be committed, specifically whether a flyway migration file matches the naming convention.
# The hook should exit with a non-zero status after issuing an appropriate message if it wants to stop the commit.
#

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# Redirect output to stderr.
exec 1>&2

echo Enforcing Flyway sql file naming conventions.

# Filenames should end in /VyyyyMMddHHmmssSSS__description.sql. This regex picks up everything that doesn't end like that.
naming_convention="(^V[0-9]{17}__.*\.sql$)"

# Get the filenames (--name-only) of all staged files from the commit (git diff --cached) that have a .sql extension
# Ignore deleted files by using --diff-filter=d. 
staged_sql_files=$(git diff --cached --diff-filter=d --name-only */db/migration/*.sql)

# If -n (not null), there are .sql files staged in this commit.
if [ -n "$staged_sql_files" ];
then
	# For each filename found, check if it matches the pattern. 
	for sql_file in $staged_sql_files;
	do 
		base_name=$(basename $sql_file)
		if [[ ! $base_name =~ $naming_convention ]];
		then
	    echo $sql_file does not match the naming convention.
		echo The pattern to be used is \'V\'yyyyMMddHHmmssSSS\'__\'description. 
		exit 1
		fi
	done
fi
